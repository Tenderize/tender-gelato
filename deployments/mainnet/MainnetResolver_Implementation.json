{
  "address": "0xcE1C1335F70A2f432A877d22DBaA84ccb7725444",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tenderizer",
          "type": "address"
        }
      ],
      "name": "claimRewardsExecutor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tenderizer",
          "type": "address"
        }
      ],
      "name": "rebaseChecker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canExec",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "execPayload",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_tenderizer",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_steak",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rebaseInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rebaseThreshold",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x286105b27bd764c1ce44eb0dea01249d975a23af1d94685b57f427b20a2e5b87",
  "receipt": {
    "to": null,
    "from": "0x34b1e9F5a8dA6FBA4DEE1A376AfDac652A4D4D83",
    "contractAddress": "0xcE1C1335F70A2f432A877d22DBaA84ccb7725444",
    "transactionIndex": 240,
    "gasUsed": "1485895",
    "logsBloom": "0x
    "blockHash": "0x0719391c3f2e433d0266ae2650812f17ebb9b6679697910a367590310aad25cc",
    "transactionHash": "0x286105b27bd764c1ce44eb0dea01249d975a23af1d94685b57f427b20a2e5b87",
    "logs": [],
    "blockNumber": 14920815,
    "cumulativeGasUsed": "16948828",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e8dc8365205e5abbfd8c1ee862bf2b6b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tenderizer\",\"type\":\"address\"}],\"name\":\"claimRewardsExecutor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tenderizer\",\"type\":\"address\"}],\"name\":\"rebaseChecker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tenderizer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_steak\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebaseInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebaseThreshold\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MainnetResolver.sol\":\"MainnetResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !AddressUpgradeable.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7454006cccb737612b00104d2f606d728e2818b778e7e55542f063c614ce46ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/IResolver.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IResolver {\\n     function rebaseChecker (address _tenderizer) \\n        external\\n        view\\n    returns (bool canExec, bytes memory execPayload);\\n\\n    function register(\\n        string memory _name,\\n        address _tenderizer,\\n        IERC20 _steak,\\n        address _stakingContract,\\n        uint256 _depositInterval,\\n        uint256 _depositThreshold,\\n        uint256 _rebaseInternval,\\n        uint256 _rebaseThreshold\\n    ) external;\\n\\n    function setGov(address _gov) external;\\n\\n    function claimRewardsExecutor(address _tenderizer) external ;\\n}\",\"keccak256\":\"0x5268b9e37010d1edf07813c354c29229473ab7ed994680c481f241fdc63e140d\",\"license\":\"MIT\"},\"contracts/MainnetResolver.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./Resolver.sol\\\";\\n\\nimport \\\"./interfaces/IGraph.sol\\\";\\nimport \\\"./interfaces/IMatic.sol\\\";\\nimport \\\"./interfaces/IAudius.sol\\\";\\n\\ncontract MainnetResolver is Resolver {\\n    // Matic contstants\\n    uint256 constant EXCHANGE_RATE_PRECISION = 100; // For Validator ID < 8\\n    uint256 constant EXCHANGE_RATE_PRECISION_HIGH = 10**29; // For Validator ID >= 8\\n\\n    bytes32 constant GRAPH = 0xf33f789e3939d11e1b15e7342d3161b39f98259904e8ebdc1da58ce84a17f509; // \\\"Graph\\\"\\n    bytes32 constant AUDIUS = 0xbf92ffa8d618cd090d960a5b3cb58c78332d37eedf59819530a17714aa2dc74c; // \\\"Audius\\\"\\n    bytes32 constant MATIC = 0xe0323cd44c3bff8ae1a6f6bb89d41ecaa34bcb9eab6e20fe02a77f37f7344b83; // \\\"Matic\\\"\\n\\n    function rebaseChecker(address _tenderizer)\\n        external \\n        override\\n        view\\n    returns (bool canExec, bytes memory execPayload){\\n        execPayload = abi.encodeWithSelector(IResolver.claimRewardsExecutor.selector, _tenderizer);\\n        Protocol storage protocol = protocols[_tenderizer];\\n\\n        // Return true if pending deposits to stake\\n        canExec = _depositChecker(_tenderizer);\\n        if(canExec){\\n            return (canExec, execPayload);\\n        }\\n\\n        if(protocol.lastClaim + protocol.rebaseInterval > block.timestamp) {\\n            return (canExec, execPayload);\\n        }\\n\\n        ITenderizer tenderizer = ITenderizer(_tenderizer);\\n        uint256 currentPrinciple = tenderizer.totalStakedTokens();\\n        uint256 stake;\\n\\n        if (keccak256(bytes(protocol.name)) == GRAPH) {\\n            // Graph\\n            address node = tenderizer.node();\\n            IGraph graph = IGraph(protocol.stakingContract);\\n            IGraph.Delegation memory delegation = graph.getDelegation(node, _tenderizer);\\n            IGraph.DelegationPool memory delPool = graph.delegationPools(node);\\n\\n            uint256 delShares = delegation.shares;\\n            uint256 totalShares = delPool.shares;\\n            uint256 totalTokens = delPool.tokens;\\n\\n            stake = (delShares * totalTokens) / totalShares;\\n        } else if (keccak256(bytes(protocol.name)) == AUDIUS) {\\n            // Audius\\n            IAudius audius = IAudius(protocol.stakingContract);\\n            stake = audius.getTotalDelegatorStake(_tenderizer);\\n        } else if (keccak256(bytes(protocol.name)) == MATIC) {\\n            // Matic\\n            IMatic matic = IMatic(protocol.stakingContract);\\n            uint256 shares = matic.balanceOf(_tenderizer);\\n            stake = (shares * _getExchangeRate(matic)) / _getExchangeRatePrecision(matic);\\n        }\\n\\n        if (stake > currentPrinciple + protocol.rebaseThreshold){\\n            canExec = true;\\n        }\\n    }\\n\\n    // Matic internal functions\\n    function _getExchangeRatePrecision(IMatic _matic) internal view returns (uint256) {\\n        return _matic.validatorId() < 8 ? EXCHANGE_RATE_PRECISION : EXCHANGE_RATE_PRECISION_HIGH;\\n    }\\n\\n    function _getExchangeRate(IMatic _matic) internal view returns (uint256) {\\n        uint256 rate = _matic.exchangeRate();\\n        return rate == 0 ? 1 : rate;\\n    }\\n}\\n\",\"keccak256\":\"0x5e7c3803a6e567aa7fef426372bc9ab2642c47b7a3be35b8e686999483169fec\",\"license\":\"MIT\"},\"contracts/Resolver.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./IResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/ITenderizer.sol\\\";\\n\\nabstract contract Resolver is IResolver, ContextUpgradeable {\\n\\n    struct Protocol {\\n        string name;\\n        IERC20 steak;\\n        address stakingContract;\\n        uint256 depositInterval;\\n        uint256 depositThreshold;\\n        uint256 rebaseInterval;\\n        uint256 rebaseThreshold;\\n        uint256 lastClaim;\\n    }\\n\\n    mapping(address => Protocol) protocols;\\n    address gov;\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov);\\n        _;\\n    }\\n\\n    function initialize() external initializer {\\n        __Context_init_unchained();\\n        gov = msg.sender;\\n    }\\n\\n    function _depositChecker(address _tenderizer)\\n        view\\n        internal\\n    returns (bool canExec){\\n        Protocol storage protocol = protocols[_tenderizer];\\n\\n        if (protocol.lastClaim + protocol.depositInterval > block.timestamp) {\\n            return false;\\n        }\\n\\n        uint256 tenderizerSteakBal = protocol.steak.balanceOf(_tenderizer);\\n\\n        if (tenderizerSteakBal >= protocol.depositThreshold) {\\n            canExec = true;\\n        }\\n    }\\n\\n    function rebaseChecker(address _tenderizer)\\n        external \\n        override\\n        view\\n        virtual\\n    returns (bool canExec, bytes memory execPayload);\\n\\n    function claimRewardsExecutor(address _tenderizer) external override {\\n        ITenderizer tenderizer = ITenderizer(_tenderizer);\\n        protocols[_tenderizer].lastClaim = block.timestamp;\\n        tenderizer.claimRewards();\\n    }\\n    \\n    // Governance functions\\n    function register(\\n        string memory _name,\\n        address _tenderizer,\\n        IERC20 _steak,\\n        address _stakingContract,\\n        uint256 _depositInterval,\\n        uint256 _depositThreshold,\\n        uint256 _rebaseInterval,\\n        uint256 _rebaseThreshold\\n    ) onlyGov external override {\\n        protocols[_tenderizer] = Protocol({\\n            name: _name,\\n            steak: _steak,\\n            stakingContract: _stakingContract,\\n            depositInterval: _depositInterval,\\n            depositThreshold: _depositThreshold,\\n            rebaseInterval: _rebaseInterval,\\n            rebaseThreshold: _rebaseThreshold,\\n            lastClaim: block.timestamp - _rebaseInterval // initialize checkpoint\\n        });\\n    }\\n\\n    function setGov(address _gov) onlyGov external override {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0x22cff8f2b1dde3736f3a7425687c1898dcd8baa2f4b7f0300b58c4959649a787\",\"license\":\"MIT\"},\"contracts/interfaces/IAudius.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IAudius {\\n    /**\\n     * @notice Get total delegation from a given address\\n     * @param _delegator - delegator address\\n     */\\n    function getTotalDelegatorStake(address _delegator) external view returns (uint256);\\n\\n    /**\\n     * @notice Allow a delegator to delegate stake to a service provider\\n     * @param _targetSP - address of service provider to delegate to\\n     * @param _amount - amount in wei to delegate\\n     * @return Updated total amount delegated to the service provider by delegator\\n     */\\n    function delegateStake(address _targetSP, uint256 _amount) external returns (uint256);\\n\\n    /**\\n     * @notice Submit request for undelegation\\n     * @param _target - address of service provider to undelegate stake from\\n     * @param _amount - amount in wei to undelegate\\n     * @return Updated total amount delegated to the service provider by delegator\\n     */\\n    function requestUndelegateStake(address _target, uint256 _amount) external returns (uint256);\\n\\n    /**\\n     * @notice Cancel undelegation request\\n     */\\n    function cancelUndelegateStakeRequest() external;\\n\\n    /**\\n     * @notice Finalize undelegation request and withdraw stake\\n     * @return New total amount currently staked after stake has been undelegated\\n     */\\n    function undelegateStake() external returns (uint256);\\n\\n    /**\\n     * @notice Claim and distribute rewards to delegators and service provider as necessary\\n     * @param _serviceProvider - Provider for which rewards are being distributed\\n     * @dev Factors in service provider rewards from delegator and transfers deployer cut\\n     */\\n    function claimRewards(address _serviceProvider) external;\\n\\n    /// @notice Get the Staking address\\n    function getStakingAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd6ea982628f1fd1bfabaabbf5165cf8033b7315efd53d1a272937f6bcbaae7df\",\"license\":\"MIT\"},\"contracts/interfaces/IGraph.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IGraph {\\n    // -- Delegation Data --\\n\\n    /**\\n     * @dev Delegation pool information. One per indexer.\\n     */\\n    struct DelegationPool {\\n        uint32 cooldownBlocks; // Blocks to wait before updating parameters\\n        uint32 indexingRewardCut; // in PPM\\n        uint32 queryFeeCut; // in PPM\\n        uint256 updatedAtBlock; // Block when the pool was last updated\\n        uint256 tokens; // Total tokens as pool reserves\\n        uint256 shares; // Total shares minted in the pool\\n        // mapping(address => Delegation) delegators; // Mapping of delegator => Delegation\\n    }\\n\\n    /**\\n     * @dev Individual delegation data of a delegator in a pool.\\n     */\\n    struct Delegation {\\n        uint256 shares; // Shares owned by a delegator in the pool\\n        uint256 tokensLocked; // Tokens locked for undelegation\\n        uint256 tokensLockedUntil; // Block when locked tokens can be withdrawn\\n    }\\n\\n    function delegate(address _indexer, uint256 _tokens) external returns (uint256);\\n\\n    function undelegate(address _indexer, uint256 _shares) external returns (uint256);\\n\\n    function withdrawDelegated(address _indexer, address _newIndexer) external returns (uint256);\\n\\n    function getDelegation(address _indexer, address _delegator) external view returns (Delegation memory);\\n\\n    function delegationPools(address _indexer) external view returns (DelegationPool memory);\\n\\n    function getWithdraweableDelegatedTokens(Delegation memory _delegation) external view returns (uint256);\\n\\n    function thawingPeriod() external view returns (uint256);\\n\\n    function delegationTaxPercentage() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x0607d7240a6ce504bba6eef545b866c4ffa1ae4cbb312b8088928dafdbb30868\",\"license\":\"MIT\"},\"contracts/interfaces/IMatic.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n// note this contract interface is only for stakeManager use\\ninterface IMatic {\\n    function exchangeRate() external view returns (uint256);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function validatorId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xabba9d60848bc7a58f522bc7e68a236a0dadc02e0649cdc7b2b0d50a018f25df\",\"license\":\"MIT\"},\"contracts/interfaces/ITenderizer.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITenderizer {\\n    function deposit(uint256 _amount) external;\\n    function claimRewards() external;\\n    function node() external view returns (address);\\n    function totalStakedTokens() external view returns (uint256 totalStaked);\\n}\",\"keccak256\":\"0xcf1f8e5f5fe3957526bddd2ee1c61845cf014bf539198e4e2d1a603b800146e9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506119fc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063033990e51461005c5780631ef4a23d146100785780638129fc1c14610094578063a679912f1461009e578063cfad57a2146100cf575b600080fd5b61007660048036038101906100719190611171565b6100eb565b005b610092600480360381019061008d91906111c3565b61019b565b005b61009c61038f565b005b6100b860048036038101906100b39190611171565b610464565b6040516100c692919061148e565b60405180910390f35b6100e960048036038101906100e49190611171565b610a78565b005b600081905042603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701819055508073ffffffffffffffffffffffffffffffffffffffff1663372500ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561017f57600080fd5b505af1158015610193573d6000803e3d6000fd5b505050505050565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101f557600080fd5b6040518061010001604052808981526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020018342610263919061169d565b815250603360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906102c1929190610eec565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701559050505050505050505050565b600061039b6001610b16565b905080156103bf576001600060016101000a81548160ff0219169083151502179055505b6103c7610c06565b33603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156104615760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161045891906114be565b60405180910390a15b50565b6000606063033990e560e01b83604051602401610481919061144a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061052c84610c57565b9250821561053a5750610a73565b428160050154826007015461054f91906115bc565b111561055b5750610a73565b600084905060008173ffffffffffffffffffffffffffffffffffffffff16633ae732596040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a857600080fd5b505afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e091906112df565b905060007ff33f789e3939d11e1b15e7342d3161b39f98259904e8ebdc1da58ce84a17f50960001b846000016040516106199190611433565b6040518091039020141561082e5760008373ffffffffffffffffffffffffffffffffffffffff1663d70754ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561066f57600080fd5b505afa158015610683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a7919061119a565b905060008560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166315049a5a848c6040518363ffffffff1660e01b815260040161070f929190611465565b60606040518083038186803b15801561072757600080fd5b505afa15801561073b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f91906112b6565b905060008273ffffffffffffffffffffffffffffffffffffffff166392511c8f856040518263ffffffff1660e01b815260040161079c919061144a565b60c06040518083038186803b1580156107b457600080fd5b505afa1580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec919061128d565b905060008260000151905060008260a0015190506000836080015190508181846108169190611643565b6108209190611612565b975050505050505050610a52565b7fbf92ffa8d618cd090d960a5b3cb58c78332d37eedf59819530a17714aa2dc74c60001b846000016040516108639190611433565b6040518091039020141561092b5760008460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663b0303b75896040518263ffffffff1660e01b81526004016108d3919061144a565b60206040518083038186803b1580156108eb57600080fd5b505afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092391906112df565b915050610a51565b7fe0323cd44c3bff8ae1a6f6bb89d41ecaa34bcb9eab6e20fe02a77f37f7344b8360001b846000016040516109609190611433565b60405180910390201415610a505760008460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b81526004016109d2919061144a565b60206040518083038186803b1580156109ea57600080fd5b505afa1580156109fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2291906112df565b9050610a2d82610d89565b610a3683610e2d565b82610a419190611643565b610a4b9190611612565b925050505b5b5b836006015482610a6291906115bc565b811115610a6e57600195505b505050505b915091565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ad257600080fd5b80603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060019054906101000a900460ff1615610b8d5760018260ff16148015610b455750610b4330610ec9565b155b610b84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7b906114d9565b60405180910390fd5b60009050610c01565b8160ff1660008054906101000a900460ff1660ff1610610be2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd9906114d9565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060019054906101000a900460ff16610c55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4c906114f9565b60405180910390fd5b565b600080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090504281600301548260070154610cb091906115bc565b1115610cc0576000915050610d84565b60008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401610d1f919061144a565b60206040518083038186803b158015610d3757600080fd5b505afa158015610d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6f91906112df565b905081600401548110610d8157600192505b50505b919050565b600060088273ffffffffffffffffffffffffffffffffffffffff16635c5f7dae6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dd357600080fd5b505afa158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b91906112df565b10610e23576c01431e0fae6d7217caa0000000610e26565b60645b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7657600080fd5b505afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae91906112df565b905060008114610ebe5780610ec1565b60015b915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054610ef89061179c565b90600052602060002090601f016020900481019282610f1a5760008555610f61565b82601f10610f3357805160ff1916838001178555610f61565b82800160010185558215610f61579182015b82811115610f60578251825591602001919060010190610f45565b5b509050610f6e9190610f72565b5090565b5b80821115610f8b576000816000905550600101610f73565b5090565b6000610fa2610f9d8461153e565b611519565b905082815260208101848484011115610fba57600080fd5b610fc584828561175a565b509392505050565b600081359050610fdc8161196a565b92915050565b600081519050610ff18161196a565b92915050565b60008135905061100681611981565b92915050565b600082601f83011261101d57600080fd5b813561102d848260208601610f8f565b91505092915050565b600060c0828403121561104857600080fd5b61105260c0611519565b905060006110628482850161115c565b60008301525060206110768482850161115c565b602083015250604061108a8482850161115c565b604083015250606061109e84828501611147565b60608301525060806110b284828501611147565b60808301525060a06110c684828501611147565b60a08301525092915050565b6000606082840312156110e457600080fd5b6110ee6060611519565b905060006110fe84828501611147565b600083015250602061111284828501611147565b602083015250604061112684828501611147565b60408301525092915050565b60008135905061114181611998565b92915050565b60008151905061115681611998565b92915050565b60008151905061116b816119af565b92915050565b60006020828403121561118357600080fd5b600061119184828501610fcd565b91505092915050565b6000602082840312156111ac57600080fd5b60006111ba84828501610fe2565b91505092915050565b600080600080600080600080610100898b0312156111e057600080fd5b600089013567ffffffffffffffff8111156111fa57600080fd5b6112068b828c0161100c565b98505060206112178b828c01610fcd565b97505060406112288b828c01610ff7565b96505060606112398b828c01610fcd565b955050608061124a8b828c01611132565b94505060a061125b8b828c01611132565b93505060c061126c8b828c01611132565b92505060e061127d8b828c01611132565b9150509295985092959890939650565b600060c0828403121561129f57600080fd5b60006112ad84828501611036565b91505092915050565b6000606082840312156112c857600080fd5b60006112d6848285016110d2565b91505092915050565b6000602082840312156112f157600080fd5b60006112ff84828501611147565b91505092915050565b611311816116d1565b82525050565b611320816116e3565b82525050565b600061133182611584565b61133b818561158f565b935061134b818560208601611769565b611354816118bb565b840191505092915050565b6000815461136c8161179c565b61137681866115a0565b9450600182166000811461139157600181146113a2576113d5565b60ff198316865281860193506113d5565b6113ab8561156f565b60005b838110156113cd578154818901526001820191506020810190506113ae565b838801955050505b50505092915050565b6113e781611748565b82525050565b60006113fa602e836115ab565b9150611405826118cc565b604082019050919050565b600061141d602b836115ab565b91506114288261191b565b604082019050919050565b600061143f828461135f565b915081905092915050565b600060208201905061145f6000830184611308565b92915050565b600060408201905061147a6000830185611308565b6114876020830184611308565b9392505050565b60006040820190506114a36000830185611317565b81810360208301526114b58184611326565b90509392505050565b60006020820190506114d360008301846113de565b92915050565b600060208201905081810360008301526114f2816113ed565b9050919050565b6000602082019050818103600083015261151281611410565b9050919050565b6000611523611534565b905061152f82826117ce565b919050565b6000604051905090565b600067ffffffffffffffff8211156115595761155861188c565b5b611562826118bb565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006115c782611721565b91506115d283611721565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611607576116066117ff565b5b828201905092915050565b600061161d82611721565b915061162883611721565b9250826116385761163761182e565b5b828204905092915050565b600061164e82611721565b915061165983611721565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611692576116916117ff565b5b828202905092915050565b60006116a882611721565b91506116b383611721565b9250828210156116c6576116c56117ff565b5b828203905092915050565b60006116dc82611701565b9050919050565b60008115159050919050565b60006116fa826116d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60006117538261173b565b9050919050565b82818337600083830152505050565b60005b8381101561178757808201518184015260208101905061176c565b83811115611796576000848401525b50505050565b600060028204905060018216806117b457607f821691505b602082108114156117c8576117c761185d565b5b50919050565b6117d7826118bb565b810181811067ffffffffffffffff821117156117f6576117f561188c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b611973816116d1565b811461197e57600080fd5b50565b61198a816116ef565b811461199557600080fd5b50565b6119a181611721565b81146119ac57600080fd5b50565b6119b88161172b565b81146119c357600080fd5b5056fea2646970667358221220263a802dec56cf28440a9b6f06bd07fd79b14d30132e4779616040894d6092af64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063033990e51461005c5780631ef4a23d146100785780638129fc1c14610094578063a679912f1461009e578063cfad57a2146100cf575b600080fd5b61007660048036038101906100719190611171565b6100eb565b005b610092600480360381019061008d91906111c3565b61019b565b005b61009c61038f565b005b6100b860048036038101906100b39190611171565b610464565b6040516100c692919061148e565b60405180910390f35b6100e960048036038101906100e49190611171565b610a78565b005b600081905042603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701819055508073ffffffffffffffffffffffffffffffffffffffff1663372500ab6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561017f57600080fd5b505af1158015610193573d6000803e3d6000fd5b505050505050565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101f557600080fd5b6040518061010001604052808981526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020018342610263919061169d565b815250603360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190805190602001906102c1929190610eec565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701559050505050505050505050565b600061039b6001610b16565b905080156103bf576001600060016101000a81548160ff0219169083151502179055505b6103c7610c06565b33603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156104615760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161045891906114be565b60405180910390a15b50565b6000606063033990e560e01b83604051602401610481919061144a565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506000603360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905061052c84610c57565b9250821561053a5750610a73565b428160050154826007015461054f91906115bc565b111561055b5750610a73565b600084905060008173ffffffffffffffffffffffffffffffffffffffff16633ae732596040518163ffffffff1660e01b815260040160206040518083038186803b1580156105a857600080fd5b505afa1580156105bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e091906112df565b905060007ff33f789e3939d11e1b15e7342d3161b39f98259904e8ebdc1da58ce84a17f50960001b846000016040516106199190611433565b6040518091039020141561082e5760008373ffffffffffffffffffffffffffffffffffffffff1663d70754ec6040518163ffffffff1660e01b815260040160206040518083038186803b15801561066f57600080fd5b505afa158015610683573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a7919061119a565b905060008560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166315049a5a848c6040518363ffffffff1660e01b815260040161070f929190611465565b60606040518083038186803b15801561072757600080fd5b505afa15801561073b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075f91906112b6565b905060008273ffffffffffffffffffffffffffffffffffffffff166392511c8f856040518263ffffffff1660e01b815260040161079c919061144a565b60c06040518083038186803b1580156107b457600080fd5b505afa1580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec919061128d565b905060008260000151905060008260a0015190506000836080015190508181846108169190611643565b6108209190611612565b975050505050505050610a52565b7fbf92ffa8d618cd090d960a5b3cb58c78332d37eedf59819530a17714aa2dc74c60001b846000016040516108639190611433565b6040518091039020141561092b5760008460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663b0303b75896040518263ffffffff1660e01b81526004016108d3919061144a565b60206040518083038186803b1580156108eb57600080fd5b505afa1580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092391906112df565b915050610a51565b7fe0323cd44c3bff8ae1a6f6bb89d41ecaa34bcb9eab6e20fe02a77f37f7344b8360001b846000016040516109609190611433565b60405180910390201415610a505760008460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a082318a6040518263ffffffff1660e01b81526004016109d2919061144a565b60206040518083038186803b1580156109ea57600080fd5b505afa1580156109fe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2291906112df565b9050610a2d82610d89565b610a3683610e2d565b82610a419190611643565b610a4b9190611612565b925050505b5b5b836006015482610a6291906115bc565b811115610a6e57600195505b505050505b915091565b603460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ad257600080fd5b80603460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060019054906101000a900460ff1615610b8d5760018260ff16148015610b455750610b4330610ec9565b155b610b84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b7b906114d9565b60405180910390fd5b60009050610c01565b8160ff1660008054906101000a900460ff1660ff1610610be2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd9906114d9565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060019054906101000a900460ff16610c55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4c906114f9565b60405180910390fd5b565b600080603360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090504281600301548260070154610cb091906115bc565b1115610cc0576000915050610d84565b60008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b8152600401610d1f919061144a565b60206040518083038186803b158015610d3757600080fd5b505afa158015610d4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6f91906112df565b905081600401548110610d8157600192505b50505b919050565b600060088273ffffffffffffffffffffffffffffffffffffffff16635c5f7dae6040518163ffffffff1660e01b815260040160206040518083038186803b158015610dd357600080fd5b505afa158015610de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0b91906112df565b10610e23576c01431e0fae6d7217caa0000000610e26565b60645b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b815260040160206040518083038186803b158015610e7657600080fd5b505afa158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae91906112df565b905060008114610ebe5780610ec1565b60015b915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054610ef89061179c565b90600052602060002090601f016020900481019282610f1a5760008555610f61565b82601f10610f3357805160ff1916838001178555610f61565b82800160010185558215610f61579182015b82811115610f60578251825591602001919060010190610f45565b5b509050610f6e9190610f72565b5090565b5b80821115610f8b576000816000905550600101610f73565b5090565b6000610fa2610f9d8461153e565b611519565b905082815260208101848484011115610fba57600080fd5b610fc584828561175a565b509392505050565b600081359050610fdc8161196a565b92915050565b600081519050610ff18161196a565b92915050565b60008135905061100681611981565b92915050565b600082601f83011261101d57600080fd5b813561102d848260208601610f8f565b91505092915050565b600060c0828403121561104857600080fd5b61105260c0611519565b905060006110628482850161115c565b60008301525060206110768482850161115c565b602083015250604061108a8482850161115c565b604083015250606061109e84828501611147565b60608301525060806110b284828501611147565b60808301525060a06110c684828501611147565b60a08301525092915050565b6000606082840312156110e457600080fd5b6110ee6060611519565b905060006110fe84828501611147565b600083015250602061111284828501611147565b602083015250604061112684828501611147565b60408301525092915050565b60008135905061114181611998565b92915050565b60008151905061115681611998565b92915050565b60008151905061116b816119af565b92915050565b60006020828403121561118357600080fd5b600061119184828501610fcd565b91505092915050565b6000602082840312156111ac57600080fd5b60006111ba84828501610fe2565b91505092915050565b600080600080600080600080610100898b0312156111e057600080fd5b600089013567ffffffffffffffff8111156111fa57600080fd5b6112068b828c0161100c565b98505060206112178b828c01610fcd565b97505060406112288b828c01610ff7565b96505060606112398b828c01610fcd565b955050608061124a8b828c01611132565b94505060a061125b8b828c01611132565b93505060c061126c8b828c01611132565b92505060e061127d8b828c01611132565b9150509295985092959890939650565b600060c0828403121561129f57600080fd5b60006112ad84828501611036565b91505092915050565b6000606082840312156112c857600080fd5b60006112d6848285016110d2565b91505092915050565b6000602082840312156112f157600080fd5b60006112ff84828501611147565b91505092915050565b611311816116d1565b82525050565b611320816116e3565b82525050565b600061133182611584565b61133b818561158f565b935061134b818560208601611769565b611354816118bb565b840191505092915050565b6000815461136c8161179c565b61137681866115a0565b9450600182166000811461139157600181146113a2576113d5565b60ff198316865281860193506113d5565b6113ab8561156f565b60005b838110156113cd578154818901526001820191506020810190506113ae565b838801955050505b50505092915050565b6113e781611748565b82525050565b60006113fa602e836115ab565b9150611405826118cc565b604082019050919050565b600061141d602b836115ab565b91506114288261191b565b604082019050919050565b600061143f828461135f565b915081905092915050565b600060208201905061145f6000830184611308565b92915050565b600060408201905061147a6000830185611308565b6114876020830184611308565b9392505050565b60006040820190506114a36000830185611317565b81810360208301526114b58184611326565b90509392505050565b60006020820190506114d360008301846113de565b92915050565b600060208201905081810360008301526114f2816113ed565b9050919050565b6000602082019050818103600083015261151281611410565b9050919050565b6000611523611534565b905061152f82826117ce565b919050565b6000604051905090565b600067ffffffffffffffff8211156115595761155861188c565b5b611562826118bb565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006115c782611721565b91506115d283611721565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611607576116066117ff565b5b828201905092915050565b600061161d82611721565b915061162883611721565b9250826116385761163761182e565b5b828204905092915050565b600061164e82611721565b915061165983611721565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611692576116916117ff565b5b828202905092915050565b60006116a882611721565b91506116b383611721565b9250828210156116c6576116c56117ff565b5b828203905092915050565b60006116dc82611701565b9050919050565b60008115159050919050565b60006116fa826116d1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b60006117538261173b565b9050919050565b82818337600083830152505050565b60005b8381101561178757808201518184015260208101905061176c565b83811115611796576000848401525b50505050565b600060028204905060018216806117b457607f821691505b602082108114156117c8576117c761185d565b5b50919050565b6117d7826118bb565b810181811067ffffffffffffffff821117156117f6576117f561188c565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b611973816116d1565b811461197e57600080fd5b50565b61198a816116ef565b811461199557600080fd5b50565b6119a181611721565b81146119ac57600080fd5b50565b6119b88161172b565b81146119c357600080fd5b5056fea2646970667358221220263a802dec56cf28440a9b6f06bd07fd79b14d30132e4779616040894d6092af64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/MainnetResolver.sol:MainnetResolver",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/MainnetResolver.sol:MainnetResolver",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 425,
        "contract": "contracts/MainnetResolver.sol:MainnetResolver",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1087,
        "contract": "contracts/MainnetResolver.sol:MainnetResolver",
        "label": "protocols",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_struct(Protocol)1082_storage)"
      },
      {
        "astId": 1089,
        "contract": "contracts/MainnetResolver.sol:MainnetResolver",
        "label": "gov",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)504": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Protocol)1082_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Resolver.Protocol)",
        "numberOfBytes": "32",
        "value": "t_struct(Protocol)1082_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Protocol)1082_storage": {
        "encoding": "inplace",
        "label": "struct Resolver.Protocol",
        "members": [
          {
            "astId": 1066,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1069,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "steak",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)504"
          },
          {
            "astId": 1071,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "stakingContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1073,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "depositInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1075,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "depositThreshold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1077,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "rebaseInterval",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1079,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "rebaseThreshold",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1081,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "lastClaim",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}