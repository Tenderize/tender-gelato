{
  "language": "Solidity",
  "sources": {
    "contracts/ArbitrumResolver.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"./Resolver.sol\";\nimport \"./interfaces/ITenderizer.sol\";\n\nimport \"./interfaces/ILivepeer.sol\";\nimport \"@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol\";\n\ncontract ArbitrumResolver is Resolver {\n    IQuoterV2 public uniswapQuoter;\n    uint256 MAX_ROUND = 2**256 - 1;\n\n    function rebaseChecker(address _tenderizer)\n        external \n        override\n    returns (bool canExec, bytes memory execPayload){\n        execPayload = abi.encode();\n        Protocol storage protocol = protocols[_tenderizer];\n        ITenderizer tenderizer = ITenderizer(_tenderizer);\n\n        uint256 currentPrinciple = tenderizer.totalStakedTokens();\n        uint256 stake;\n\n        if (keccak256(bytes(protocol.name)) == keccak256(bytes(\"Livepeer\"))) {\n            // Livepeer\n            ILivepeer livepeer = ILivepeer(protocol.stakingContract);\n            stake = livepeer.pendingStake(address(this), MAX_ROUND);\n\n            // Check for ETH Rewards\n            uint256 ethFees = livepeer.pendingFees(address(this), MAX_ROUND);\n            if(ethFees > 0){\n                IQuoterV2.QuoteExactInputSingleParams memory params = IQuoterV2.QuoteExactInputSingleParams({\n                        tokenIn: address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2),\n                        tokenOut: address(protocol.steak),\n                        amountIn: ethFees,\n                        fee: 10000,\n                        sqrtPriceLimitX96: 0\n                    });\n                (uint256 amountOut,,,)= uniswapQuoter.quoteExactInputSingle(params);\n                stake += amountOut;\n            }\n        }\n\n        uint256 blockTimestamp = block.timestamp;\n\n        if (stake > currentPrinciple + protocol.rebaseThreshold\n          && (protocol.lastRebase == 0\n           || protocol.lastRebase + protocol.rebaseInternval < blockTimestamp)){\n            protocol.lastRebase = blockTimestamp;\n            canExec = true;\n        } else {\n            canExec = false;\n        }\n    }\n\n    // Livepeer specific functions\n    function setUniswapQuoter(address _uniswapQuoter) external onlyGov {\n        uniswapQuoter = IQuoterV2(_uniswapQuoter);\n    }\n}\n"
    },
    "contracts/Resolver.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"./IResolver.sol\";\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\nabstract contract Resolver is IResolver, Initializable {\n\n    struct Protocol {\n        string name;\n        IERC20 steak;\n        address stakingContract;\n        uint256 depositInterval;\n        uint256 depositThreshold;\n        uint256 lastDeposit;\n        uint256 rebaseInternval;\n        uint256 rebaseThreshold;\n        uint256 lastRebase;\n    }\n\n    mapping(address => Protocol) protocols;\n    address gov;\n\n    modifier onlyGov() {\n        require(msg.sender == gov);\n        _;\n    }\n\n    function initialize() external initializer {\n        gov = msg.sender;\n    }\n\n    function depositChecker(address _tenderizer)\n        external\n        override\n    returns (bool canExec, bytes memory execPayload){\n        Protocol storage protocol = protocols[_tenderizer];\n        uint256 tenderizerSteakBal = protocol.steak.balanceOf(_tenderizer);\n        uint256 blockTimestamp = block.timestamp;\n\n        if(tenderizerSteakBal > protocol.depositThreshold \n          && (protocol.lastDeposit == 0\n           || protocol.lastDeposit + protocol.depositInterval < blockTimestamp)) {\n            protocol.lastDeposit = blockTimestamp;\n            canExec = true;\n            execPayload = abi.encode(tenderizerSteakBal);\n        } else {\n            canExec = false;\n            execPayload = abi.encode();\n        }\n    }\n\n    function rebaseChecker(address _tenderizer)\n        external \n        override\n        virtual\n    returns (bool canExec, bytes memory execPayload);\n    \n    // Governance functions\n    function register(\n        string memory _name,\n        address _tenderizer,\n        IERC20 _steak,\n        address _stakingContract,\n        uint256 _depositInterval,\n        uint256 _depositThreshold,\n        uint256 _rebaseInternval,\n        uint256 _rebaseThreshold\n    ) onlyGov external override {\n        protocols[_tenderizer] = Protocol(\n            _name,\n            _steak, \n            _stakingContract,\n            _depositInterval,\n            _depositThreshold,\n            0,\n            _rebaseInternval,\n            _rebaseThreshold,\n            0\n        );\n    }\n\n    function setGov(address _gov) onlyGov external override {\n        gov = _gov;\n    }\n}\n"
    },
    "contracts/interfaces/ITenderizer.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n// TODO: Remove unwatned functions\n\n/**\n * @title Tenderizer is the base contract to be implemented.\n * @notice Tenderizer is responsible for all Protocol interactions (staking, unstaking, claiming rewards)\n * while also keeping track of user depsotis/withdrawals and protocol fees.\n * @dev New implementations are required to inherit this contract and override any required internal functions.\n */\ninterface ITenderizer {\n\n    function node() external view returns (address);\n\n    /**\n     * @notice Total Staked Tokens returns the total amount of underlying tokens staked by this Tenderizer.\n     * @return totalStaked total amount staked by this Tenderizer\n     */\n    function totalStakedTokens() external view returns (uint256 totalStaked);\n}"
    },
    "contracts/interfaces/ILivepeer.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface ILivepeer {\n    function bond(uint256 _amount, address _to) external;\n\n    function unbond(uint256 _amount) external;\n\n    function withdrawStake(uint256 _unbondingLockId) external;\n\n    function withdrawFees() external;\n\n    function pendingFees(address _delegator, uint256 _endRound) external view returns (uint256);\n\n    function pendingStake(address _delegator, uint256 _endRound) external view returns (uint256);\n}\n"
    },
    "@uniswap/v3-periphery/contracts/interfaces/IQuoterV2.sol": {
      "content": "// SPDX-License-Identifier: GPL-2.0-or-later\npragma solidity >=0.7.5;\npragma abicoder v2;\n\n/// @title QuoterV2 Interface\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps.\n/// @notice For each pool also tells you the number of initialized ticks crossed and the sqrt price of the pool after the swap.\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\ninterface IQuoterV2 {\n    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee\n    /// @param amountIn The amount of the first token to swap\n    /// @return amountOut The amount of the last token that would be received\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInput(bytes memory path, uint256 amountIn)\n        external\n        returns (\n            uint256 amountOut,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    struct QuoteExactInputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amountIn;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactInputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountIn The desired input amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountOut The amount of `tokenOut` that would be received\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactInputSingle(QuoteExactInputSingleParams memory params)\n        external\n        returns (\n            uint256 amountOut,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        );\n\n    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n    /// @param path The path of the swap, i.e. each token pair and the pool fee. Path must be provided in reverse order\n    /// @param amountOut The amount of the last token to receive\n    /// @return amountIn The amount of first token required to be paid\n    /// @return sqrtPriceX96AfterList List of the sqrt price after the swap for each pool in the path\n    /// @return initializedTicksCrossedList List of the initialized ticks that the swap crossed for each pool in the path\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutput(bytes memory path, uint256 amountOut)\n        external\n        returns (\n            uint256 amountIn,\n            uint160[] memory sqrtPriceX96AfterList,\n            uint32[] memory initializedTicksCrossedList,\n            uint256 gasEstimate\n        );\n\n    struct QuoteExactOutputSingleParams {\n        address tokenIn;\n        address tokenOut;\n        uint256 amount;\n        uint24 fee;\n        uint160 sqrtPriceLimitX96;\n    }\n\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n    /// @param params The params for the quote, encoded as `QuoteExactOutputSingleParams`\n    /// tokenIn The token being swapped in\n    /// tokenOut The token being swapped out\n    /// fee The fee of the token pool to consider for the pair\n    /// amountOut The desired output amount\n    /// sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n    /// @return sqrtPriceX96After The sqrt price of the pool after the swap\n    /// @return initializedTicksCrossed The number of initialized ticks that the swap crossed\n    /// @return gasEstimate The estimate of the gas that the swap consumes\n    function quoteExactOutputSingle(QuoteExactOutputSingleParams memory params)\n        external\n        returns (\n            uint256 amountIn,\n            uint160 sqrtPriceX96After,\n            uint32 initializedTicksCrossed,\n            uint256 gasEstimate\n        );\n}\n"
    },
    "contracts/IResolver.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IResolver {\n    function depositChecker(address _tenderizer)\n        external\n    returns (bool canExec, bytes memory execPayload);\n\n     function rebaseChecker (address _tenderizer) \n        external\n    returns (bool canExec, bytes memory execPayload);\n\n    function register(\n        string memory _name,\n        address _tenderizer,\n        IERC20 _steak,\n        address _stakingContract,\n        uint256 _depositInterval,\n        uint256 _depositThreshold,\n        uint256 _rebaseInternval,\n        uint256 _rebaseThreshold\n    ) external;\n\n    function setGov(address _gov) external;\n}"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 && !Address.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized < version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/MainnetResolver.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\n\nimport \"./Resolver.sol\";\nimport \"./interfaces/ITenderizer.sol\";\n\nimport \"./interfaces/IGraph.sol\";\nimport \"./interfaces/IMatic.sol\";\nimport \"./interfaces/IAudius.sol\";\n\ncontract MainnetResolver is Resolver {\n    // Matic contstants\n    uint256 constant EXCHANGE_RATE_PRECISION = 100; // For Validator ID < 8\n    uint256 constant EXCHANGE_RATE_PRECISION_HIGH = 10**29; // For Validator ID >= 8\n\n    function rebaseChecker(address _tenderizer)\n        external \n        override\n    returns (bool canExec, bytes memory execPayload){\n        execPayload = abi.encode();\n        Protocol storage protocol = protocols[_tenderizer];\n        ITenderizer tenderizer = ITenderizer(_tenderizer);\n\n        uint256 currentPrinciple = tenderizer.totalStakedTokens();\n        uint256 stake;\n\n        if (keccak256(bytes(protocol.name)) == keccak256(bytes(\"Graph\"))) {\n            // Graph\n            address node = tenderizer.node();\n            IGraph graph = IGraph(protocol.stakingContract);\n            IGraph.Delegation memory delegation = graph.getDelegation(node, address(this));\n            IGraph.DelegationPool memory delPool = graph.delegationPools(node);\n\n            uint256 delShares = delegation.shares;\n            uint256 totalShares = delPool.shares;\n            uint256 totalTokens = delPool.tokens;\n\n            stake = (delShares * totalTokens) / totalShares;\n        } else if (keccak256(bytes(protocol.name)) == keccak256(bytes(\"Audius\"))) {\n            // Audius\n            IAudius audius = IAudius(protocol.stakingContract);\n            stake = audius.getTotalDelegatorStake(address(this));\n        } else if (keccak256(bytes(protocol.name)) == keccak256(bytes(\"Matic\"))) {\n            // Matic\n            IMatic matic = IMatic(protocol.stakingContract);\n            uint256 shares = matic.balanceOf(address(this));\n            stake = (shares * _getExchangeRate(matic)) / _getExchangeRatePrecision(matic);\n        }\n\n        uint256 blockTimestamp = block.timestamp;\n\n        if (stake > currentPrinciple + protocol.rebaseThreshold\n          && (protocol.lastRebase == 0\n           || protocol.lastRebase + protocol.rebaseInternval < blockTimestamp)){\n            protocol.lastRebase = blockTimestamp;\n            canExec = true;\n        } else {\n            canExec = false;\n        }\n    }\n\n    // Matic internal functions\n    function _getExchangeRatePrecision(IMatic _matic) internal view returns (uint256) {\n        return _matic.validatorId() < 8 ? EXCHANGE_RATE_PRECISION : EXCHANGE_RATE_PRECISION_HIGH;\n    }\n\n    function _getExchangeRate(IMatic _matic) internal view returns (uint256) {\n        uint256 rate = _matic.exchangeRate();\n        return rate == 0 ? 1 : rate;\n    }\n}\n"
    },
    "contracts/interfaces/IGraph.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IGraph {\n    // -- Delegation Data --\n\n    /**\n     * @dev Delegation pool information. One per indexer.\n     */\n    struct DelegationPool {\n        uint32 cooldownBlocks; // Blocks to wait before updating parameters\n        uint32 indexingRewardCut; // in PPM\n        uint32 queryFeeCut; // in PPM\n        uint256 updatedAtBlock; // Block when the pool was last updated\n        uint256 tokens; // Total tokens as pool reserves\n        uint256 shares; // Total shares minted in the pool\n        // mapping(address => Delegation) delegators; // Mapping of delegator => Delegation\n    }\n\n    /**\n     * @dev Individual delegation data of a delegator in a pool.\n     */\n    struct Delegation {\n        uint256 shares; // Shares owned by a delegator in the pool\n        uint256 tokensLocked; // Tokens locked for undelegation\n        uint256 tokensLockedUntil; // Block when locked tokens can be withdrawn\n    }\n\n    function delegate(address _indexer, uint256 _tokens) external returns (uint256);\n\n    function undelegate(address _indexer, uint256 _shares) external returns (uint256);\n\n    function withdrawDelegated(address _indexer, address _newIndexer) external returns (uint256);\n\n    function getDelegation(address _indexer, address _delegator) external view returns (Delegation memory);\n\n    function delegationPools(address _indexer) external view returns (DelegationPool memory);\n\n    function getWithdraweableDelegatedTokens(Delegation memory _delegation) external view returns (uint256);\n\n    function thawingPeriod() external view returns (uint256);\n\n    function delegationTaxPercentage() external view returns (uint32);\n}\n"
    },
    "contracts/interfaces/IMatic.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\n// note this contract interface is only for stakeManager use\ninterface IMatic {\n    function exchangeRate() external view returns (uint256);\n\n    function balanceOf(address) external view returns (uint256);\n\n    function validatorId() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IAudius.sol": {
      "content": "// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IAudius {\n    /**\n     * @notice Get total delegation from a given address\n     * @param _delegator - delegator address\n     */\n    function getTotalDelegatorStake(address _delegator) external view returns (uint256);\n\n    /**\n     * @notice Allow a delegator to delegate stake to a service provider\n     * @param _targetSP - address of service provider to delegate to\n     * @param _amount - amount in wei to delegate\n     * @return Updated total amount delegated to the service provider by delegator\n     */\n    function delegateStake(address _targetSP, uint256 _amount) external returns (uint256);\n\n    /**\n     * @notice Submit request for undelegation\n     * @param _target - address of service provider to undelegate stake from\n     * @param _amount - amount in wei to undelegate\n     * @return Updated total amount delegated to the service provider by delegator\n     */\n    function requestUndelegateStake(address _target, uint256 _amount) external returns (uint256);\n\n    /**\n     * @notice Cancel undelegation request\n     */\n    function cancelUndelegateStakeRequest() external;\n\n    /**\n     * @notice Finalize undelegation request and withdraw stake\n     * @return New total amount currently staked after stake has been undelegated\n     */\n    function undelegateStake() external returns (uint256);\n\n    /**\n     * @notice Claim and distribute rewards to delegators and service provider as necessary\n     * @param _serviceProvider - Provider for which rewards are being distributed\n     * @dev Factors in service provider rewards from delegator and transfers deployer cut\n     */\n    function claimRewards(address _serviceProvider) external;\n\n    /// @notice Get the Staking address\n    function getStakingAddress() external view returns (address);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}