{
  "address": "0x5D81f2195Edfc63a020fDeF1f15105AdA28De4E0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tenderizer",
          "type": "address"
        }
      ],
      "name": "depositChecker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canExec",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "execPayload",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tenderizer",
          "type": "address"
        }
      ],
      "name": "rebaseChecker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "canExec",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "execPayload",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_tenderizer",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_steak",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stakingContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_depositInterval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_depositThreshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rebaseInternval",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_rebaseThreshold",
          "type": "uint256"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gov",
          "type": "address"
        }
      ],
      "name": "setGov",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe0a925c5b9e79adaa980b545e86b858f8e0d4d02585b4b3fbb6ea752789cac4a",
  "receipt": {
    "to": null,
    "from": "0xe426ad6DDF3905de9D798f49cb19d6E9A6a3335f",
    "contractAddress": "0x5D81f2195Edfc63a020fDeF1f15105AdA28De4E0",
    "transactionIndex": 24,
    "gasUsed": "1418598",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x7e6d72d11df8565b3ae53e5bebfc087c85a6b5861dd5953dea35c3518700570b",
    "transactionHash": "0xe0a925c5b9e79adaa980b545e86b858f8e0d4d02585b4b3fbb6ea752789cac4a",
    "logs": [],
    "blockNumber": 10772241,
    "cumulativeGasUsed": "4718817",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "64eef6c6165ba94b115a0e97cb9e417c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tenderizer\",\"type\":\"address\"}],\"name\":\"depositChecker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tenderizer\",\"type\":\"address\"}],\"name\":\"rebaseChecker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"canExec\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"execPayload\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_tenderizer\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_steak\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositInterval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_depositThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebaseInternval\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rebaseThreshold\",\"type\":\"uint256\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gov\",\"type\":\"address\"}],\"name\":\"setGov\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MainnetResolver.sol\":\"MainnetResolver\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = _setInitializedVersion(1);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        bool isTopLevelCall = _setInitializedVersion(version);\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(version);\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        _setInitializedVersion(type(uint8).max);\\n    }\\n\\n    function _setInitializedVersion(uint8 version) private returns (bool) {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\\n        // of initializers, because in other contexts the contract may have been reentered.\\n        if (_initializing) {\\n            require(\\n                version == 1 && !Address.isContract(address(this)),\\n                \\\"Initializable: contract is already initialized\\\"\\n            );\\n            return false;\\n        } else {\\n            require(_initialized < version, \\\"Initializable: contract is already initialized\\\");\\n            _initialized = version;\\n            return true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb68c2016cd41840646addd6f79f17f80f42a6279acb0cd4d9d85cab6e8d9b777\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/IResolver.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IResolver {\\n    function depositChecker(address _tenderizer)\\n        external\\n    returns (bool canExec, bytes memory execPayload);\\n\\n     function rebaseChecker (address _tenderizer) \\n        external\\n    returns (bool canExec, bytes memory execPayload);\\n\\n    function register(\\n        string memory _name,\\n        address _tenderizer,\\n        IERC20 _steak,\\n        address _stakingContract,\\n        uint256 _depositInterval,\\n        uint256 _depositThreshold,\\n        uint256 _rebaseInternval,\\n        uint256 _rebaseThreshold\\n    ) external;\\n\\n    function setGov(address _gov) external;\\n}\",\"keccak256\":\"0x606c1392a1ecc02ec7c2b645fc4e62ad6d9dcd70fce4322e8aa0e2555cada639\",\"license\":\"MIT\"},\"contracts/MainnetResolver.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./Resolver.sol\\\";\\nimport \\\"./interfaces/ITenderizer.sol\\\";\\n\\nimport \\\"./interfaces/IGraph.sol\\\";\\nimport \\\"./interfaces/IMatic.sol\\\";\\nimport \\\"./interfaces/IAudius.sol\\\";\\n\\ncontract MainnetResolver is Resolver {\\n    // Matic contstants\\n    uint256 constant EXCHANGE_RATE_PRECISION = 100; // For Validator ID < 8\\n    uint256 constant EXCHANGE_RATE_PRECISION_HIGH = 10**29; // For Validator ID >= 8\\n\\n    function rebaseChecker(address _tenderizer)\\n        external \\n        override\\n    returns (bool canExec, bytes memory execPayload){\\n        execPayload = abi.encode();\\n        Protocol storage protocol = protocols[_tenderizer];\\n        ITenderizer tenderizer = ITenderizer(_tenderizer);\\n\\n        uint256 currentPrinciple = tenderizer.totalStakedTokens();\\n        uint256 stake;\\n\\n        if (keccak256(bytes(protocol.name)) == keccak256(bytes(\\\"Graph\\\"))) {\\n            // Graph\\n            address node = tenderizer.node();\\n            IGraph graph = IGraph(protocol.stakingContract);\\n            IGraph.Delegation memory delegation = graph.getDelegation(node, address(this));\\n            IGraph.DelegationPool memory delPool = graph.delegationPools(node);\\n\\n            uint256 delShares = delegation.shares;\\n            uint256 totalShares = delPool.shares;\\n            uint256 totalTokens = delPool.tokens;\\n\\n            stake = (delShares * totalTokens) / totalShares;\\n        } else if (keccak256(bytes(protocol.name)) == keccak256(bytes(\\\"Audius\\\"))) {\\n            // Audius\\n            IAudius audius = IAudius(protocol.stakingContract);\\n            stake = audius.getTotalDelegatorStake(address(this));\\n        } else if (keccak256(bytes(protocol.name)) == keccak256(bytes(\\\"Matic\\\"))) {\\n            // Matic\\n            IMatic matic = IMatic(protocol.stakingContract);\\n            uint256 shares = matic.balanceOf(address(this));\\n            stake = (shares * _getExchangeRate(matic)) / _getExchangeRatePrecision(matic);\\n        }\\n\\n        uint256 blockTimestamp = block.timestamp;\\n\\n        if (stake > currentPrinciple + protocol.rebaseThreshold\\n          && (protocol.lastRebase == 0\\n           || protocol.lastRebase + protocol.rebaseInternval < blockTimestamp)){\\n            protocol.lastRebase = blockTimestamp;\\n            canExec = true;\\n        } else {\\n            canExec = false;\\n        }\\n    }\\n\\n    // Matic internal functions\\n    function _getExchangeRatePrecision(IMatic _matic) internal view returns (uint256) {\\n        return _matic.validatorId() < 8 ? EXCHANGE_RATE_PRECISION : EXCHANGE_RATE_PRECISION_HIGH;\\n    }\\n\\n    function _getExchangeRate(IMatic _matic) internal view returns (uint256) {\\n        uint256 rate = _matic.exchangeRate();\\n        return rate == 0 ? 1 : rate;\\n    }\\n}\\n\",\"keccak256\":\"0xf890788a268250a5aa952ee3de722098630f3f408ea05b9b50de4e6c864a7dd1\",\"license\":\"MIT\"},\"contracts/Resolver.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"./IResolver.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\nabstract contract Resolver is IResolver, Initializable {\\n\\n    struct Protocol {\\n        string name;\\n        IERC20 steak;\\n        address stakingContract;\\n        uint256 depositInterval;\\n        uint256 depositThreshold;\\n        uint256 lastDeposit;\\n        uint256 rebaseInternval;\\n        uint256 rebaseThreshold;\\n        uint256 lastRebase;\\n    }\\n\\n    mapping(address => Protocol) protocols;\\n    address gov;\\n\\n    modifier onlyGov() {\\n        require(msg.sender == gov);\\n        _;\\n    }\\n\\n    function initialize() external initializer {\\n        gov = msg.sender;\\n    }\\n\\n    function depositChecker(address _tenderizer)\\n        external\\n        override\\n    returns (bool canExec, bytes memory execPayload){\\n        Protocol storage protocol = protocols[_tenderizer];\\n        uint256 tenderizerSteakBal = protocol.steak.balanceOf(_tenderizer);\\n        uint256 blockTimestamp = block.timestamp;\\n\\n        if(tenderizerSteakBal > protocol.depositThreshold \\n          && (protocol.lastDeposit == 0\\n           || protocol.lastDeposit + protocol.depositInterval < blockTimestamp)) {\\n            protocol.lastDeposit = blockTimestamp;\\n            canExec = true;\\n            execPayload = abi.encode(tenderizerSteakBal);\\n        } else {\\n            canExec = false;\\n            execPayload = abi.encode();\\n        }\\n    }\\n\\n    function rebaseChecker(address _tenderizer)\\n        external \\n        override\\n        virtual\\n    returns (bool canExec, bytes memory execPayload);\\n    \\n    // Governance functions\\n    function register(\\n        string memory _name,\\n        address _tenderizer,\\n        IERC20 _steak,\\n        address _stakingContract,\\n        uint256 _depositInterval,\\n        uint256 _depositThreshold,\\n        uint256 _rebaseInternval,\\n        uint256 _rebaseThreshold\\n    ) onlyGov external override {\\n        protocols[_tenderizer] = Protocol(\\n            _name,\\n            _steak, \\n            _stakingContract,\\n            _depositInterval,\\n            _depositThreshold,\\n            0,\\n            _rebaseInternval,\\n            _rebaseThreshold,\\n            0\\n        );\\n    }\\n\\n    function setGov(address _gov) onlyGov external override {\\n        gov = _gov;\\n    }\\n}\\n\",\"keccak256\":\"0xa33b2a44c83c2dae930a88f0e9a653e293c112d99c52ab3d2e1a865ad1345b3f\",\"license\":\"MIT\"},\"contracts/interfaces/IAudius.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IAudius {\\n    /**\\n     * @notice Get total delegation from a given address\\n     * @param _delegator - delegator address\\n     */\\n    function getTotalDelegatorStake(address _delegator) external view returns (uint256);\\n\\n    /**\\n     * @notice Allow a delegator to delegate stake to a service provider\\n     * @param _targetSP - address of service provider to delegate to\\n     * @param _amount - amount in wei to delegate\\n     * @return Updated total amount delegated to the service provider by delegator\\n     */\\n    function delegateStake(address _targetSP, uint256 _amount) external returns (uint256);\\n\\n    /**\\n     * @notice Submit request for undelegation\\n     * @param _target - address of service provider to undelegate stake from\\n     * @param _amount - amount in wei to undelegate\\n     * @return Updated total amount delegated to the service provider by delegator\\n     */\\n    function requestUndelegateStake(address _target, uint256 _amount) external returns (uint256);\\n\\n    /**\\n     * @notice Cancel undelegation request\\n     */\\n    function cancelUndelegateStakeRequest() external;\\n\\n    /**\\n     * @notice Finalize undelegation request and withdraw stake\\n     * @return New total amount currently staked after stake has been undelegated\\n     */\\n    function undelegateStake() external returns (uint256);\\n\\n    /**\\n     * @notice Claim and distribute rewards to delegators and service provider as necessary\\n     * @param _serviceProvider - Provider for which rewards are being distributed\\n     * @dev Factors in service provider rewards from delegator and transfers deployer cut\\n     */\\n    function claimRewards(address _serviceProvider) external;\\n\\n    /// @notice Get the Staking address\\n    function getStakingAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd6ea982628f1fd1bfabaabbf5165cf8033b7315efd53d1a272937f6bcbaae7df\",\"license\":\"MIT\"},\"contracts/interfaces/IGraph.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IGraph {\\n    // -- Delegation Data --\\n\\n    /**\\n     * @dev Delegation pool information. One per indexer.\\n     */\\n    struct DelegationPool {\\n        uint32 cooldownBlocks; // Blocks to wait before updating parameters\\n        uint32 indexingRewardCut; // in PPM\\n        uint32 queryFeeCut; // in PPM\\n        uint256 updatedAtBlock; // Block when the pool was last updated\\n        uint256 tokens; // Total tokens as pool reserves\\n        uint256 shares; // Total shares minted in the pool\\n        // mapping(address => Delegation) delegators; // Mapping of delegator => Delegation\\n    }\\n\\n    /**\\n     * @dev Individual delegation data of a delegator in a pool.\\n     */\\n    struct Delegation {\\n        uint256 shares; // Shares owned by a delegator in the pool\\n        uint256 tokensLocked; // Tokens locked for undelegation\\n        uint256 tokensLockedUntil; // Block when locked tokens can be withdrawn\\n    }\\n\\n    function delegate(address _indexer, uint256 _tokens) external returns (uint256);\\n\\n    function undelegate(address _indexer, uint256 _shares) external returns (uint256);\\n\\n    function withdrawDelegated(address _indexer, address _newIndexer) external returns (uint256);\\n\\n    function getDelegation(address _indexer, address _delegator) external view returns (Delegation memory);\\n\\n    function delegationPools(address _indexer) external view returns (DelegationPool memory);\\n\\n    function getWithdraweableDelegatedTokens(Delegation memory _delegation) external view returns (uint256);\\n\\n    function thawingPeriod() external view returns (uint256);\\n\\n    function delegationTaxPercentage() external view returns (uint32);\\n}\\n\",\"keccak256\":\"0x0607d7240a6ce504bba6eef545b866c4ffa1ae4cbb312b8088928dafdbb30868\",\"license\":\"MIT\"},\"contracts/interfaces/IMatic.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n// note this contract interface is only for stakeManager use\\ninterface IMatic {\\n    function exchangeRate() external view returns (uint256);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function validatorId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xabba9d60848bc7a58f522bc7e68a236a0dadc02e0649cdc7b2b0d50a018f25df\",\"license\":\"MIT\"},\"contracts/interfaces/ITenderizer.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Tenderize <info@tenderize.me>\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// TODO: Remove unwatned functions\\n\\n/**\\n * @title Tenderizer is the base contract to be implemented.\\n * @notice Tenderizer is responsible for all Protocol interactions (staking, unstaking, claiming rewards)\\n * while also keeping track of user depsotis/withdrawals and protocol fees.\\n * @dev New implementations are required to inherit this contract and override any required internal functions.\\n */\\ninterface ITenderizer {\\n\\n    function node() external view returns (address);\\n\\n    /**\\n     * @notice Total Staked Tokens returns the total amount of underlying tokens staked by this Tenderizer.\\n     * @return totalStaked total amount staked by this Tenderizer\\n     */\\n    function totalStakedTokens() external view returns (uint256 totalStaked);\\n}\",\"keccak256\":\"0x0b423ab5b3c62d1ed10cfb1899e10f42964f75b9323fed9f5e4863aeae8a0aa2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506118c6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80631ef4a23d1461005c57806370fae560146100785780638129fc1c146100a9578063a679912f146100b3578063cfad57a2146100e4575b600080fd5b61007660048036038101906100719190611129565b610100565b005b610092600480360381019061008d91906110d7565b6102fc565b6040516100a09291906113e0565b60405180910390f35b6100b161048a565b005b6100cd60048036038101906100c891906110d7565b610557565b6040516100db9291906113e0565b60405180910390f35b6100fe60048036038101906100f991906110d7565b610b61565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461015a57600080fd5b6040518061012001604052808981526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001600081526020018381526020018281526020016000815250600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190610223929190610e52565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801559050505050505050505050565b600060606000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b81526004016103a2919061139c565b60206040518083038186803b1580156103ba57600080fd5b505afa1580156103ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f29190611245565b9050600042905082600401548211801561042d575060008360050154148061042c5750808360030154846005015461042a9190611509565b105b5b15610466578083600501819055506001945081604051602001610450919061144b565b6040516020818303038152906040529350610482565b6000945060405160200160405160208183030381529060405293505b505050915091565b60006104966001610bff565b905080156104ba576001600060016101000a81548160ff0219169083151502179055505b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156105545760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161054b9190611410565b60405180910390a15b50565b6000606060405160200160405160208183030381529060405290506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600084905060008173ffffffffffffffffffffffffffffffffffffffff16633ae732596040518163ffffffff1660e01b815260040160206040518083038186803b15801561060257600080fd5b505afa158015610616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a9190611245565b905060006040518060400160405280600581526020017f4772617068000000000000000000000000000000000000000000000000000000815250805190602001208460000160405161068c9190611385565b604051809103902014156108a15760008373ffffffffffffffffffffffffffffffffffffffff1663d70754ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e257600080fd5b505afa1580156106f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071a9190611100565b905060008560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166315049a5a84306040518363ffffffff1660e01b81526004016107829291906113b7565b60606040518083038186803b15801561079a57600080fd5b505afa1580156107ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d2919061121c565b905060008273ffffffffffffffffffffffffffffffffffffffff166392511c8f856040518263ffffffff1660e01b815260040161080f919061139c565b60c06040518083038186803b15801561082757600080fd5b505afa15801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f91906111f3565b905060008260000151905060008260a0015190506000836080015190508181846108899190611590565b610893919061155f565b975050505050505050610af7565b6040518060400160405280600681526020017f417564697573000000000000000000000000000000000000000000000000000081525080519060200120846000016040516108ef9190611385565b604051809103902014156109b75760008460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663b0303b75306040518263ffffffff1660e01b815260040161095f919061139c565b60206040518083038186803b15801561097757600080fd5b505afa15801561098b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109af9190611245565b915050610af6565b6040518060400160405280600581526020017f4d617469630000000000000000000000000000000000000000000000000000008152508051906020012084600001604051610a059190611385565b60405180910390201415610af55760008460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a77919061139c565b60206040518083038186803b158015610a8f57600080fd5b505afa158015610aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac79190611245565b9050610ad282610cef565b610adb83610d93565b82610ae69190611590565b610af0919061155f565b925050505b5b5b6000429050846007015483610b0c9190611509565b82118015610b3b5750600085600801541480610b3a57508085600601548660080154610b389190611509565b105b5b15610b525780856008018190555060019650610b57565b600096505b5050505050915091565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bbb57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060019054906101000a900460ff1615610c765760018260ff16148015610c2e5750610c2c30610e2f565b155b610c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c649061142b565b60405180910390fd5b60009050610cea565b8160ff1660008054906101000a900460ff1660ff1610610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc29061142b565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060088273ffffffffffffffffffffffffffffffffffffffff16635c5f7dae6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3957600080fd5b505afa158015610d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d719190611245565b10610d89576c01431e0fae6d7217caa0000000610d8c565b60645b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b815260040160206040518083038186803b158015610ddc57600080fd5b505afa158015610df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e149190611245565b905060008114610e245780610e27565b60015b915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054610e5e906116b5565b90600052602060002090601f016020900481019282610e805760008555610ec7565b82601f10610e9957805160ff1916838001178555610ec7565b82800160010185558215610ec7579182015b82811115610ec6578251825591602001919060010190610eab565b5b509050610ed49190610ed8565b5090565b5b80821115610ef1576000816000905550600101610ed9565b5090565b6000610f08610f038461148b565b611466565b905082815260208101848484011115610f2057600080fd5b610f2b848285611673565b509392505050565b600081359050610f4281611834565b92915050565b600081519050610f5781611834565b92915050565b600081359050610f6c8161184b565b92915050565b600082601f830112610f8357600080fd5b8135610f93848260208601610ef5565b91505092915050565b600060c08284031215610fae57600080fd5b610fb860c0611466565b90506000610fc8848285016110c2565b6000830152506020610fdc848285016110c2565b6020830152506040610ff0848285016110c2565b6040830152506060611004848285016110ad565b6060830152506080611018848285016110ad565b60808301525060a061102c848285016110ad565b60a08301525092915050565b60006060828403121561104a57600080fd5b6110546060611466565b90506000611064848285016110ad565b6000830152506020611078848285016110ad565b602083015250604061108c848285016110ad565b60408301525092915050565b6000813590506110a781611862565b92915050565b6000815190506110bc81611862565b92915050565b6000815190506110d181611879565b92915050565b6000602082840312156110e957600080fd5b60006110f784828501610f33565b91505092915050565b60006020828403121561111257600080fd5b600061112084828501610f48565b91505092915050565b600080600080600080600080610100898b03121561114657600080fd5b600089013567ffffffffffffffff81111561116057600080fd5b61116c8b828c01610f72565b985050602061117d8b828c01610f33565b975050604061118e8b828c01610f5d565b965050606061119f8b828c01610f33565b95505060806111b08b828c01611098565b94505060a06111c18b828c01611098565b93505060c06111d28b828c01611098565b92505060e06111e38b828c01611098565b9150509295985092959890939650565b600060c0828403121561120557600080fd5b600061121384828501610f9c565b91505092915050565b60006060828403121561122e57600080fd5b600061123c84828501611038565b91505092915050565b60006020828403121561125757600080fd5b6000611265848285016110ad565b91505092915050565b611277816115ea565b82525050565b611286816115fc565b82525050565b6000611297826114d1565b6112a181856114dc565b93506112b1818560208601611682565b6112ba816117d4565b840191505092915050565b600081546112d2816116b5565b6112dc81866114ed565b945060018216600081146112f757600181146113085761133b565b60ff1983168652818601935061133b565b611311856114bc565b60005b8381101561133357815481890152600182019150602081019050611314565b838801955050505b50505092915050565b61134d81611661565b82525050565b6000611360602e836114f8565b915061136b826117e5565b604082019050919050565b61137f8161163a565b82525050565b600061139182846112c5565b915081905092915050565b60006020820190506113b1600083018461126e565b92915050565b60006040820190506113cc600083018561126e565b6113d9602083018461126e565b9392505050565b60006040820190506113f5600083018561127d565b8181036020830152611407818461128c565b90509392505050565b60006020820190506114256000830184611344565b92915050565b6000602082019050818103600083015261144481611353565b9050919050565b60006020820190506114606000830184611376565b92915050565b6000611470611481565b905061147c82826116e7565b919050565b6000604051905090565b600067ffffffffffffffff8211156114a6576114a56117a5565b5b6114af826117d4565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006115148261163a565b915061151f8361163a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561155457611553611718565b5b828201905092915050565b600061156a8261163a565b91506115758361163a565b92508261158557611584611747565b5b828204905092915050565b600061159b8261163a565b91506115a68361163a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115df576115de611718565b5b828202905092915050565b60006115f58261161a565b9050919050565b60008115159050919050565b6000611613826115ea565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b600061166c82611654565b9050919050565b82818337600083830152505050565b60005b838110156116a0578082015181840152602081019050611685565b838111156116af576000848401525b50505050565b600060028204905060018216806116cd57607f821691505b602082108114156116e1576116e0611776565b5b50919050565b6116f0826117d4565b810181811067ffffffffffffffff8211171561170f5761170e6117a5565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b61183d816115ea565b811461184857600080fd5b50565b61185481611608565b811461185f57600080fd5b50565b61186b8161163a565b811461187657600080fd5b50565b61188281611644565b811461188d57600080fd5b5056fea26469706673582212200744fa49ea18d43c81328324ab72cce0e0a2ac8a99202bfb8011a8a725e7100164736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80631ef4a23d1461005c57806370fae560146100785780638129fc1c146100a9578063a679912f146100b3578063cfad57a2146100e4575b600080fd5b61007660048036038101906100719190611129565b610100565b005b610092600480360381019061008d91906110d7565b6102fc565b6040516100a09291906113e0565b60405180910390f35b6100b161048a565b005b6100cd60048036038101906100c891906110d7565b610557565b6040516100db9291906113e0565b60405180910390f35b6100fe60048036038101906100f991906110d7565b610b61565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461015a57600080fd5b6040518061012001604052808981526020018773ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001600081526020018381526020018281526020016000815250600160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019080519060200190610223929190610e52565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e0820151816007015561010082015181600801559050505050505050505050565b600060606000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231866040518263ffffffff1660e01b81526004016103a2919061139c565b60206040518083038186803b1580156103ba57600080fd5b505afa1580156103ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f29190611245565b9050600042905082600401548211801561042d575060008360050154148061042c5750808360030154846005015461042a9190611509565b105b5b15610466578083600501819055506001945081604051602001610450919061144b565b6040516020818303038152906040529350610482565b6000945060405160200160405160208183030381529060405293505b505050915091565b60006104966001610bff565b905080156104ba576001600060016101000a81548160ff0219169083151502179055505b33600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080156105545760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498600160405161054b9190611410565b60405180910390a15b50565b6000606060405160200160405160208183030381529060405290506000600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050600084905060008173ffffffffffffffffffffffffffffffffffffffff16633ae732596040518163ffffffff1660e01b815260040160206040518083038186803b15801561060257600080fd5b505afa158015610616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a9190611245565b905060006040518060400160405280600581526020017f4772617068000000000000000000000000000000000000000000000000000000815250805190602001208460000160405161068c9190611385565b604051809103902014156108a15760008373ffffffffffffffffffffffffffffffffffffffff1663d70754ec6040518163ffffffff1660e01b815260040160206040518083038186803b1580156106e257600080fd5b505afa1580156106f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071a9190611100565b905060008560020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166315049a5a84306040518363ffffffff1660e01b81526004016107829291906113b7565b60606040518083038186803b15801561079a57600080fd5b505afa1580156107ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d2919061121c565b905060008273ffffffffffffffffffffffffffffffffffffffff166392511c8f856040518263ffffffff1660e01b815260040161080f919061139c565b60c06040518083038186803b15801561082757600080fd5b505afa15801561083b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085f91906111f3565b905060008260000151905060008260a0015190506000836080015190508181846108899190611590565b610893919061155f565b975050505050505050610af7565b6040518060400160405280600681526020017f417564697573000000000000000000000000000000000000000000000000000081525080519060200120846000016040516108ef9190611385565b604051809103902014156109b75760008460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff1663b0303b75306040518263ffffffff1660e01b815260040161095f919061139c565b60206040518083038186803b15801561097757600080fd5b505afa15801561098b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109af9190611245565b915050610af6565b6040518060400160405280600581526020017f4d617469630000000000000000000000000000000000000000000000000000008152508051906020012084600001604051610a059190611385565b60405180910390201415610af55760008460020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a77919061139c565b60206040518083038186803b158015610a8f57600080fd5b505afa158015610aa3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac79190611245565b9050610ad282610cef565b610adb83610d93565b82610ae69190611590565b610af0919061155f565b925050505b5b5b6000429050846007015483610b0c9190611509565b82118015610b3b5750600085600801541480610b3a57508085600601548660080154610b389190611509565b105b5b15610b525780856008018190555060019650610b57565b600096505b5050505050915091565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610bbb57600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060019054906101000a900460ff1615610c765760018260ff16148015610c2e5750610c2c30610e2f565b155b610c6d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c649061142b565b60405180910390fd5b60009050610cea565b8160ff1660008054906101000a900460ff1660ff1610610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc29061142b565b60405180910390fd5b816000806101000a81548160ff021916908360ff160217905550600190505b919050565b600060088273ffffffffffffffffffffffffffffffffffffffff16635c5f7dae6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3957600080fd5b505afa158015610d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d719190611245565b10610d89576c01431e0fae6d7217caa0000000610d8c565b60645b9050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b815260040160206040518083038186803b158015610ddc57600080fd5b505afa158015610df0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e149190611245565b905060008114610e245780610e27565b60015b915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b828054610e5e906116b5565b90600052602060002090601f016020900481019282610e805760008555610ec7565b82601f10610e9957805160ff1916838001178555610ec7565b82800160010185558215610ec7579182015b82811115610ec6578251825591602001919060010190610eab565b5b509050610ed49190610ed8565b5090565b5b80821115610ef1576000816000905550600101610ed9565b5090565b6000610f08610f038461148b565b611466565b905082815260208101848484011115610f2057600080fd5b610f2b848285611673565b509392505050565b600081359050610f4281611834565b92915050565b600081519050610f5781611834565b92915050565b600081359050610f6c8161184b565b92915050565b600082601f830112610f8357600080fd5b8135610f93848260208601610ef5565b91505092915050565b600060c08284031215610fae57600080fd5b610fb860c0611466565b90506000610fc8848285016110c2565b6000830152506020610fdc848285016110c2565b6020830152506040610ff0848285016110c2565b6040830152506060611004848285016110ad565b6060830152506080611018848285016110ad565b60808301525060a061102c848285016110ad565b60a08301525092915050565b60006060828403121561104a57600080fd5b6110546060611466565b90506000611064848285016110ad565b6000830152506020611078848285016110ad565b602083015250604061108c848285016110ad565b60408301525092915050565b6000813590506110a781611862565b92915050565b6000815190506110bc81611862565b92915050565b6000815190506110d181611879565b92915050565b6000602082840312156110e957600080fd5b60006110f784828501610f33565b91505092915050565b60006020828403121561111257600080fd5b600061112084828501610f48565b91505092915050565b600080600080600080600080610100898b03121561114657600080fd5b600089013567ffffffffffffffff81111561116057600080fd5b61116c8b828c01610f72565b985050602061117d8b828c01610f33565b975050604061118e8b828c01610f5d565b965050606061119f8b828c01610f33565b95505060806111b08b828c01611098565b94505060a06111c18b828c01611098565b93505060c06111d28b828c01611098565b92505060e06111e38b828c01611098565b9150509295985092959890939650565b600060c0828403121561120557600080fd5b600061121384828501610f9c565b91505092915050565b60006060828403121561122e57600080fd5b600061123c84828501611038565b91505092915050565b60006020828403121561125757600080fd5b6000611265848285016110ad565b91505092915050565b611277816115ea565b82525050565b611286816115fc565b82525050565b6000611297826114d1565b6112a181856114dc565b93506112b1818560208601611682565b6112ba816117d4565b840191505092915050565b600081546112d2816116b5565b6112dc81866114ed565b945060018216600081146112f757600181146113085761133b565b60ff1983168652818601935061133b565b611311856114bc565b60005b8381101561133357815481890152600182019150602081019050611314565b838801955050505b50505092915050565b61134d81611661565b82525050565b6000611360602e836114f8565b915061136b826117e5565b604082019050919050565b61137f8161163a565b82525050565b600061139182846112c5565b915081905092915050565b60006020820190506113b1600083018461126e565b92915050565b60006040820190506113cc600083018561126e565b6113d9602083018461126e565b9392505050565b60006040820190506113f5600083018561127d565b8181036020830152611407818461128c565b90509392505050565b60006020820190506114256000830184611344565b92915050565b6000602082019050818103600083015261144481611353565b9050919050565b60006020820190506114606000830184611376565b92915050565b6000611470611481565b905061147c82826116e7565b919050565b6000604051905090565b600067ffffffffffffffff8211156114a6576114a56117a5565b5b6114af826117d4565b9050602081019050919050565b60008190508160005260206000209050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b60006115148261163a565b915061151f8361163a565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561155457611553611718565b5b828201905092915050565b600061156a8261163a565b91506115758361163a565b92508261158557611584611747565b5b828204905092915050565b600061159b8261163a565b91506115a68361163a565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156115df576115de611718565b5b828202905092915050565b60006115f58261161a565b9050919050565b60008115159050919050565b6000611613826115ea565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600060ff82169050919050565b600061166c82611654565b9050919050565b82818337600083830152505050565b60005b838110156116a0578082015181840152602081019050611685565b838111156116af576000848401525b50505050565b600060028204905060018216806116cd57607f821691505b602082108114156116e1576116e0611776565b5b50919050565b6116f0826117d4565b810181811067ffffffffffffffff8211171561170f5761170e6117a5565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b61183d816115ea565b811461184857600080fd5b50565b61185481611608565b811461185f57600080fd5b50565b61186b8161163a565b811461187657600080fd5b50565b61188281611644565b811461188d57600080fd5b5056fea26469706673582212200744fa49ea18d43c81328324ab72cce0e0a2ac8a99202bfb8011a8a725e7100164736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/MainnetResolver.sol:MainnetResolver",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 9,
        "contract": "contracts/MainnetResolver.sol:MainnetResolver",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1184,
        "contract": "contracts/MainnetResolver.sol:MainnetResolver",
        "label": "protocols",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Protocol)1179_storage)"
      },
      {
        "astId": 1186,
        "contract": "contracts/MainnetResolver.sol:MainnetResolver",
        "label": "gov",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)219": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Protocol)1179_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Resolver.Protocol)",
        "numberOfBytes": "32",
        "value": "t_struct(Protocol)1179_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Protocol)1179_storage": {
        "encoding": "inplace",
        "label": "struct Resolver.Protocol",
        "members": [
          {
            "astId": 1161,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 1164,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "steak",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)219"
          },
          {
            "astId": 1166,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "stakingContract",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 1168,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "depositInterval",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1170,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "depositThreshold",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1172,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "lastDeposit",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1174,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "rebaseInternval",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1176,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "rebaseThreshold",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 1178,
            "contract": "contracts/MainnetResolver.sol:MainnetResolver",
            "label": "lastRebase",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}